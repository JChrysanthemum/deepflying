# -*- coding: utf-8 -*-
"""deepflying.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Us7MHH1ctW0yR0j2nlClXR6QIOLaHxzC

# 对抗生成网络与神经网络风格迁移的结合

## 概述

大家经过这几天对 NST（神经网络风格迁移）和DCGAN（深度卷积神经网络）的学习，已经对这两个经典的机器学习模型有了一定的认知。接下来我们就讲这两个技术进行结合。

## 环境搭建

###  所需包的导入
"""

from __future__ import print_function, division
import keras
from keras.preprocessing.image import load_img, save_img, img_to_array
import cv2

import matplotlib.pyplot as plt
# %matplotlib inline

import sys,os
import numpy as np
import sys

"""###  数据下载与准备"""

if not os.path.exists('DeepFlying'):
    os.makedirs('DeepFlying') 

if not os.path.exists('NST/data'):
    os.makedirs('NST/data') 

if not os.path.exists('GAN/models'):
    os.makedirs('GAN/models') 

from .NST import styleTransfer as st

"""## 代码编写

### 参数定义
"""

st.target_image_path = "gan.png"
st.style_reference_path = "NST/data/style.jpg"

#@markdown 迭代次数
st.iter_size = 10 #@param {type:"slider", min:10, max:200, step:5}
#@markdown 生成器模型
generator_path = 'shirt' #@param ['ankle_boot', 'bag', 'coat', 'dress','pullover','sandal','shirt','sneaker','trouser']
generator_path = 'GAN/models/'+ generator_path + '.h5'

"""### 构造生成器"""

class Generator:
    def __init__(self):
        self.generator = keras.models.load_model(generator_path)
        self.generator.trainable =False
        

    def save_imgs(self):

        noise = np.random.normal(0, 1, (1, 100))
        gen_imgs = self.generator.predict(noise)
        
        # Rescale images 0 - 1
        gen_imgs = 0.5 * gen_imgs + 0.5

        # Write these images to files
        fig, axs = plt.subplots(1,1)
        plt.imshow(gen_imgs[ 0, :, :, 0], cmap='gray')
        gen_imgs=cv2.cvtColor(gen_imgs[ 0, :, :, 0],cv2.COLOR_GRAY2BGR)*255
        
        cv2.imwrite("gan.png",gen_imgs)

        return gen_imgs
      
generator = Generator()
img = generator.save_imgs()

"""### 进行风格迁移"""

print(st.main())

gan = load_img("gan.png")
gan = img_to_array(gan)
gan = np.array(gan, np.uint8)

nst = load_img("NST.png")
nst = img_to_array(nst)
nst = np.array(nst, np.uint8)
